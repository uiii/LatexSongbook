--- orig/lib/encode.c
+++ mod/lib/encode.c
@@ -13,8 +13,10 @@
 #include <internal.h>
 
 #include <stdio.h>
+#ifndef WIN32
 #include <pwd.h>
 #include <grp.h>
+#endif
 #include <sys/types.h>
 
 #ifdef STDC_HEADERS
@@ -49,8 +51,10 @@
 void
 th_set_type(TAR *t, mode_t mode)
 {
+#ifdef S_ISLNK
 	if (S_ISLNK(mode))
 		t->th_buf.typeflag = SYMTYPE;
+#endif
 	if (S_ISREG(mode))
 		t->th_buf.typeflag = REGTYPE;
 	if (S_ISDIR(mode))
@@ -59,7 +63,12 @@
 		t->th_buf.typeflag = CHRTYPE;
 	if (S_ISBLK(mode))
 		t->th_buf.typeflag = BLKTYPE;
-	if (S_ISFIFO(mode) || S_ISSOCK(mode))
+	if (S_ISFIFO(mode)
+#ifdef S_ISSOCK
+		 || S_ISSOCK(mode))
+#else
+		)
+#endif
 		t->th_buf.typeflag = FIFOTYPE;
 }
 
@@ -146,6 +155,12 @@
 	printf("th_set_device(): major = %d, minor = %d\n",
 	       major(device), minor(device));
 #endif
+#ifndef major
+# define major(dev) ((int)(((dev) >> 8) & 0xff))
+#endif
+#ifndef minor
+# define minor(dev) ((int)((dev) & 0xff))
+#endif
 	int_to_oct(major(device), t->th_buf.devmajor, 8);
 	int_to_oct(minor(device), t->th_buf.devminor, 8);
 }
@@ -155,12 +170,13 @@
 void
 th_set_user(TAR *t, uid_t uid)
 {
+#ifndef WIN32
 	struct passwd *pw;
 
 	pw = getpwuid(uid);
 	if (pw != NULL)
 		strlcpy(t->th_buf.uname, pw->pw_name, sizeof(t->th_buf.uname));
-
+#endif
 	int_to_oct(uid, t->th_buf.uid, 8);
 }
 
@@ -169,12 +185,13 @@
 void
 th_set_group(TAR *t, gid_t gid)
 {
+#ifndef WIN32
 	struct group *gr;
 
 	gr = getgrgid(gid);
 	if (gr != NULL)
 		strlcpy(t->th_buf.gname, gr->gr_name, sizeof(t->th_buf.gname));
-
+#endif
 	int_to_oct(gid, t->th_buf.gid, 8);
 }
 
@@ -183,11 +200,13 @@
 void
 th_set_mode(TAR *t, mode_t fmode)
 {
+#ifndef WIN32
 	if (S_ISSOCK(fmode))
 	{
 		fmode &= ~S_IFSOCK;
 		fmode |= S_IFIFO;
 	}
+#endif
 	int_to_oct(fmode, (t)->th_buf.mode, 8);
 }
 
